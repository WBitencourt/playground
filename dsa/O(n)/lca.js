
    //     4
    //    / \
    //   2   7
    //  / \  /
    // 1  3 6

// 1Ô∏è‚É£ Ambos menores ‚Üí vai para a esquerda
// üìå Exemplo: v1 = 1, v2 = 3

// root = 4

// 1 < 4 e 3 < 4 ‚Üí ambos menores

// Ent√£o o LCA est√° na sub√°rvore esquerda (raiz 2).

// Nova root = 2

// Agora 1 < 2 e 3 > 2 ‚Üí est√£o em lados diferentes ‚Üí LCA = 2.

// 2Ô∏è‚É£ Ambos maiores ‚Üí vai para a direita
// üìå Exemplo: v1 = 6, v2 = 7

// root = 4

// 6 > 4 e 7 > 4 ‚Üí ambos maiores

// Ent√£o o LCA est√° na sub√°rvore direita (raiz 7).

// Nova root = 7

// Agora 6 < 7 e 7 = 7 ‚Üí lados diferentes ‚Üí LCA = 7.

// 3Ô∏è‚É£ Caso contr√°rio ‚Üí root atual √© o LCA
// üìå Exemplo: v1 = 1, v2 = 7

// root = 4

// 1 < 4 e 7 > 4 ‚Üí est√£o em lados diferentes

// Ent√£o o pr√≥prio root (4) √© o LCA.


function lca(root, v1, v2) {
  if (v1 > v2) [v1, v2] = [v2, v1]; // garante v1 <= v2

  while (root) {
    if (v2 < root.data) {
      root = root.left;
    } else if (v1 > root.data) {
      root = root.right;
    } else {
      return root; // v1 <= root.data <= v2 -> achou o LCA
    }
  }
  return null; // se n√£o encontrar (n√£o deve ocorrer se v1 e v2 existem)
}


function lca(root, v1, v2) {
  if (!root) return null;
  if (v1 > v2) [v1, v2] = [v2, v1];

  if (v2 < root.data) return lca(root.left, v1, v2);
  if (v1 > root.data) return lca(root.right, v1, v2);
  return root;
}

function lcaBinaryTree(root, v1, v2) {
  let found1 = false, found2 = false;

  function dfs(node) {
    if (!node) return null;

    const left = dfs(node.left);
    const right = dfs(node.right);

    if (node.data === v1) { found1 = true; return node; }
    if (node.data === v2) { found2 = true; return node; }

    if (left && right) return node;        // v1 e v2 em lados diferentes
    return left ?? right;                  // propaga quem achou (ou null)
  }

  const lca = dfs(root);
  return (found1 && found2) ? lca : null;  // garante que ambos existem
}

// 1) Ambos menores ‚Üí esquerda (v1=1, v2=3)
// root = 4

// v2 < 4? 3 < 4 ‚úÖ ‚áí root = root.left (vai para 2)

// root = 2

// v2 < 2? 3 < 2 ‚ùå

// v1 > 2? 1 > 2 ‚ùå

// caso contr√°rio: v1 <= root.data <= v2 ‚áí 1 <= 2 <= 3 ‚úÖ ‚áí retorna 2 (LCA = 2)

// 2) Ambos maiores ‚Üí direita (v1=6, v2=7)
// root = 4

// v2 < 4? 7 < 4 ‚ùå

// v1 > 4? 6 > 4 ‚úÖ ‚áí root = root.right (vai para 7)

// root = 7

// v2 < 7? 7 < 7 ‚ùå

// v1 > 7? 6 > 7 ‚ùå

// caso contr√°rio: v1 <= root.data <= v2 ‚áí 6 <= 7 <= 7 ‚úÖ ‚áí retorna 7 (LCA = 7)

// (note que ‚Äúum √© igual ao root‚Äù tamb√©m cai no caso do meio e j√° retorna o root como LCA)

// 3) Lados diferentes ‚Üí root atual √© o LCA (v1=1, v2=7)
// root = 4

// v2 < 4? 7 < 4 ‚ùå

// v1 > 4? 1 > 4 ‚ùå

// caso contr√°rio: 1 <= 4 <= 7 ‚úÖ ‚áí retorna 4 (LCA = 4)

// prontinho ‚Äî √© exatamente assim que a fun√ß√£o caminha pela √°rvore em cada cen√°rio. quer que eu fa√ßa o mesmo ‚Äútrace‚Äù para outros pares?